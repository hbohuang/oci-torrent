// Code generated by protoc-gen-go.
// source: api.proto
// DO NOT EDIT!

/*
Package types is a generated protocol buffer package.

It is generated from these files:
	api.proto

It has these top-level messages:
	GetServerVersionRequest
	GetServerVersionResponse
	StartDownloadRequest
	StartDownloadResponse
	StopDownloadRequest
	StopDownloadResponse
	GetTorrentRequest
	GetTorrentResponse
	StatusRequest
	LayerDownState
	StatusResponse
*/
package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetServerVersionRequest struct {
}

func (m *GetServerVersionRequest) Reset()                    { *m = GetServerVersionRequest{} }
func (m *GetServerVersionRequest) String() string            { return proto.CompactTextString(m) }
func (*GetServerVersionRequest) ProtoMessage()               {}
func (*GetServerVersionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type GetServerVersionResponse struct {
	Major    uint32 `protobuf:"varint,1,opt,name=major" json:"major,omitempty"`
	Minor    uint32 `protobuf:"varint,2,opt,name=minor" json:"minor,omitempty"`
	Patch    uint32 `protobuf:"varint,3,opt,name=patch" json:"patch,omitempty"`
	Revision string `protobuf:"bytes,4,opt,name=revision" json:"revision,omitempty"`
}

func (m *GetServerVersionResponse) Reset()                    { *m = GetServerVersionResponse{} }
func (m *GetServerVersionResponse) String() string            { return proto.CompactTextString(m) }
func (*GetServerVersionResponse) ProtoMessage()               {}
func (*GetServerVersionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type StartDownloadRequest struct {
	Source string `protobuf:"bytes,1,opt,name=source" json:"source,omitempty"`
	Stdout string `protobuf:"bytes,2,opt,name=stdout" json:"stdout,omitempty"`
	Stderr string `protobuf:"bytes,3,opt,name=stderr" json:"stderr,omitempty"`
}

func (m *StartDownloadRequest) Reset()                    { *m = StartDownloadRequest{} }
func (m *StartDownloadRequest) String() string            { return proto.CompactTextString(m) }
func (*StartDownloadRequest) ProtoMessage()               {}
func (*StartDownloadRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type StartDownloadResponse struct {
}

func (m *StartDownloadResponse) Reset()                    { *m = StartDownloadResponse{} }
func (m *StartDownloadResponse) String() string            { return proto.CompactTextString(m) }
func (*StartDownloadResponse) ProtoMessage()               {}
func (*StartDownloadResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type StopDownloadRequest struct {
	Source string `protobuf:"bytes,1,opt,name=source" json:"source,omitempty"`
	Clean  bool   `protobuf:"varint,2,opt,name=clean" json:"clean,omitempty"`
}

func (m *StopDownloadRequest) Reset()                    { *m = StopDownloadRequest{} }
func (m *StopDownloadRequest) String() string            { return proto.CompactTextString(m) }
func (*StopDownloadRequest) ProtoMessage()               {}
func (*StopDownloadRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type StopDownloadResponse struct {
	Ids []string `protobuf:"bytes,1,rep,name=ids" json:"ids,omitempty"`
}

func (m *StopDownloadResponse) Reset()                    { *m = StopDownloadResponse{} }
func (m *StopDownloadResponse) String() string            { return proto.CompactTextString(m) }
func (*StopDownloadResponse) ProtoMessage()               {}
func (*StopDownloadResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type GetTorrentRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetTorrentRequest) Reset()                    { *m = GetTorrentRequest{} }
func (m *GetTorrentRequest) String() string            { return proto.CompactTextString(m) }
func (*GetTorrentRequest) ProtoMessage()               {}
func (*GetTorrentRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type GetTorrentResponse struct {
	Torrent []byte `protobuf:"bytes,1,opt,name=torrent,proto3" json:"torrent,omitempty"`
}

func (m *GetTorrentResponse) Reset()                    { *m = GetTorrentResponse{} }
func (m *GetTorrentResponse) String() string            { return proto.CompactTextString(m) }
func (*GetTorrentResponse) ProtoMessage()               {}
func (*GetTorrentResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type StatusRequest struct {
	Source string `protobuf:"bytes,1,opt,name=source" json:"source,omitempty"`
}

func (m *StatusRequest) Reset()                    { *m = StatusRequest{} }
func (m *StatusRequest) String() string            { return proto.CompactTextString(m) }
func (*StatusRequest) ProtoMessage()               {}
func (*StatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type LayerDownState struct {
	Id        string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	State     string `protobuf:"bytes,2,opt,name=state" json:"state,omitempty"`
	Completed int64  `protobuf:"varint,3,opt,name=completed" json:"completed,omitempty"`
	Size      int64  `protobuf:"varint,4,opt,name=size" json:"size,omitempty"`
	Seeding   bool   `protobuf:"varint,5,opt,name=seeding" json:"seeding,omitempty"`
}

func (m *LayerDownState) Reset()                    { *m = LayerDownState{} }
func (m *LayerDownState) String() string            { return proto.CompactTextString(m) }
func (*LayerDownState) ProtoMessage()               {}
func (*LayerDownState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type StatusResponse struct {
	LayerDownStates []*LayerDownState `protobuf:"bytes,1,rep,name=layerDownStates" json:"layerDownStates,omitempty"`
}

func (m *StatusResponse) Reset()                    { *m = StatusResponse{} }
func (m *StatusResponse) String() string            { return proto.CompactTextString(m) }
func (*StatusResponse) ProtoMessage()               {}
func (*StatusResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *StatusResponse) GetLayerDownStates() []*LayerDownState {
	if m != nil {
		return m.LayerDownStates
	}
	return nil
}

func init() {
	proto.RegisterType((*GetServerVersionRequest)(nil), "types.GetServerVersionRequest")
	proto.RegisterType((*GetServerVersionResponse)(nil), "types.GetServerVersionResponse")
	proto.RegisterType((*StartDownloadRequest)(nil), "types.StartDownloadRequest")
	proto.RegisterType((*StartDownloadResponse)(nil), "types.StartDownloadResponse")
	proto.RegisterType((*StopDownloadRequest)(nil), "types.StopDownloadRequest")
	proto.RegisterType((*StopDownloadResponse)(nil), "types.StopDownloadResponse")
	proto.RegisterType((*GetTorrentRequest)(nil), "types.GetTorrentRequest")
	proto.RegisterType((*GetTorrentResponse)(nil), "types.GetTorrentResponse")
	proto.RegisterType((*StatusRequest)(nil), "types.StatusRequest")
	proto.RegisterType((*LayerDownState)(nil), "types.LayerDownState")
	proto.RegisterType((*StatusResponse)(nil), "types.StatusResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for API service

type APIClient interface {
	GetServerVersion(ctx context.Context, in *GetServerVersionRequest, opts ...grpc.CallOption) (*GetServerVersionResponse, error)
	StartDownload(ctx context.Context, in *StartDownloadRequest, opts ...grpc.CallOption) (*StartDownloadResponse, error)
	StopDownload(ctx context.Context, in *StopDownloadRequest, opts ...grpc.CallOption) (*StopDownloadResponse, error)
	GetTorrent(ctx context.Context, in *GetTorrentRequest, opts ...grpc.CallOption) (*GetTorrentResponse, error)
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
}

type aPIClient struct {
	cc *grpc.ClientConn
}

func NewAPIClient(cc *grpc.ClientConn) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) GetServerVersion(ctx context.Context, in *GetServerVersionRequest, opts ...grpc.CallOption) (*GetServerVersionResponse, error) {
	out := new(GetServerVersionResponse)
	err := grpc.Invoke(ctx, "/types.API/GetServerVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) StartDownload(ctx context.Context, in *StartDownloadRequest, opts ...grpc.CallOption) (*StartDownloadResponse, error) {
	out := new(StartDownloadResponse)
	err := grpc.Invoke(ctx, "/types.API/StartDownload", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) StopDownload(ctx context.Context, in *StopDownloadRequest, opts ...grpc.CallOption) (*StopDownloadResponse, error) {
	out := new(StopDownloadResponse)
	err := grpc.Invoke(ctx, "/types.API/StopDownload", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetTorrent(ctx context.Context, in *GetTorrentRequest, opts ...grpc.CallOption) (*GetTorrentResponse, error) {
	out := new(GetTorrentResponse)
	err := grpc.Invoke(ctx, "/types.API/GetTorrent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := grpc.Invoke(ctx, "/types.API/Status", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for API service

type APIServer interface {
	GetServerVersion(context.Context, *GetServerVersionRequest) (*GetServerVersionResponse, error)
	StartDownload(context.Context, *StartDownloadRequest) (*StartDownloadResponse, error)
	StopDownload(context.Context, *StopDownloadRequest) (*StopDownloadResponse, error)
	GetTorrent(context.Context, *GetTorrentRequest) (*GetTorrentResponse, error)
	Status(context.Context, *StatusRequest) (*StatusResponse, error)
}

func RegisterAPIServer(s *grpc.Server, srv APIServer) {
	s.RegisterService(&_API_serviceDesc, srv)
}

func _API_GetServerVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServerVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetServerVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.API/GetServerVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetServerVersion(ctx, req.(*GetServerVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_StartDownload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartDownloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).StartDownload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.API/StartDownload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).StartDownload(ctx, req.(*StartDownloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_StopDownload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopDownloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).StopDownload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.API/StopDownload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).StopDownload(ctx, req.(*StopDownloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetTorrent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTorrentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetTorrent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.API/GetTorrent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetTorrent(ctx, req.(*GetTorrentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.API/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _API_serviceDesc = grpc.ServiceDesc{
	ServiceName: "types.API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetServerVersion",
			Handler:    _API_GetServerVersion_Handler,
		},
		{
			MethodName: "StartDownload",
			Handler:    _API_StartDownload_Handler,
		},
		{
			MethodName: "StopDownload",
			Handler:    _API_StopDownload_Handler,
		},
		{
			MethodName: "GetTorrent",
			Handler:    _API_GetTorrent_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _API_Status_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 484 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x54, 0x41, 0x6f, 0xd3, 0x30,
	0x14, 0xa6, 0xcd, 0x5a, 0xd6, 0xc7, 0x56, 0x86, 0x69, 0x59, 0x96, 0x4d, 0x80, 0xcc, 0x81, 0x9d,
	0x7a, 0x18, 0x07, 0x8e, 0x08, 0x0d, 0x09, 0x4d, 0xda, 0x01, 0x5c, 0xe0, 0x88, 0x14, 0x9a, 0x27,
	0x08, 0xea, 0xe2, 0x60, 0xbb, 0x83, 0x71, 0xe4, 0x2f, 0xf3, 0x07, 0xb0, 0x9f, 0x9d, 0xa4, 0xcd,
	0x32, 0xb1, 0x9b, 0xbf, 0xef, 0xd9, 0xdf, 0xfb, 0xde, 0xcb, 0xa7, 0xc0, 0x28, 0x2d, 0xf3, 0x59,
	0xa9, 0xa4, 0x91, 0x6c, 0x60, 0xae, 0x4a, 0xd4, 0xfc, 0x00, 0xf6, 0xdf, 0xa2, 0x99, 0xa3, 0xba,
	0x44, 0xf5, 0x09, 0x95, 0xce, 0x65, 0x21, 0xf0, 0xc7, 0x0a, 0xb5, 0xe1, 0xbf, 0x20, 0xbe, 0x5e,
	0xd2, 0xa5, 0x2c, 0x34, 0xb2, 0x09, 0x0c, 0x2e, 0xd2, 0xef, 0x52, 0xc5, 0xbd, 0xa7, 0xbd, 0xe3,
	0x5d, 0xe1, 0x01, 0xb1, 0x79, 0x61, 0xd9, 0x7e, 0x60, 0x1d, 0x70, 0x6c, 0x99, 0x9a, 0xc5, 0xb7,
	0x38, 0xf2, 0x2c, 0x01, 0x96, 0xc0, 0xb6, 0xc2, 0xcb, 0xdc, 0xa9, 0xc6, 0x5b, 0xb6, 0x30, 0x12,
	0x35, 0xe6, 0x9f, 0x61, 0x32, 0x37, 0xa9, 0x32, 0x6f, 0xe4, 0xcf, 0x62, 0x29, 0xd3, 0x2c, 0x38,
	0x62, 0x8f, 0x60, 0xa8, 0xe5, 0x4a, 0x2d, 0x90, 0xda, 0x8e, 0x44, 0x40, 0xc4, 0x9b, 0x4c, 0xae,
	0x0c, 0x35, 0x76, 0x3c, 0xa1, 0xc0, 0xa3, 0x52, 0xd4, 0xda, 0xf3, 0x16, 0xf1, 0x7d, 0x98, 0xb6,
	0xf4, 0xfd, 0x58, 0xfc, 0x14, 0x1e, 0xce, 0x8d, 0x2c, 0x6f, 0xdb, 0xd7, 0x4e, 0xb6, 0x58, 0x62,
	0x5a, 0x50, 0xdb, 0x6d, 0xe1, 0x01, 0x3f, 0x76, 0xee, 0xd7, 0x45, 0xc2, 0xce, 0xf6, 0x20, 0xca,
	0x33, 0x6d, 0x25, 0x22, 0x2b, 0xe1, 0x8e, 0xfc, 0x19, 0x3c, 0xb0, 0x1b, 0xfe, 0x20, 0x95, 0xc2,
	0xc2, 0x54, 0xcd, 0xc6, 0xd0, 0xcf, 0xb3, 0xd0, 0xc8, 0x9e, 0xf8, 0x0c, 0xd8, 0xfa, 0xa5, 0x20,
	0x16, 0xc3, 0x5d, 0xe3, 0x29, 0xba, 0xba, 0x23, 0x2a, 0xc8, 0x9f, 0xc3, 0xae, 0x1d, 0xce, 0xac,
	0xf4, 0x7f, 0xdc, 0xf3, 0x3f, 0x3d, 0x18, 0x9f, 0xa7, 0x57, 0xa8, 0x9c, 0x53, 0xf7, 0x04, 0xdb,
	0xbd, 0xdd, 0x80, 0xda, 0x15, 0xc2, 0x5e, 0x3d, 0x60, 0x47, 0x30, 0x5a, 0xc8, 0x8b, 0x72, 0x89,
	0x06, 0x33, 0xda, 0x6c, 0x24, 0x1a, 0x82, 0x31, 0xd8, 0xd2, 0xf9, 0x6f, 0xa4, 0x8f, 0x1a, 0x09,
	0x3a, 0x3b, 0xb7, 0x1a, 0x31, 0xcb, 0x8b, 0xaf, 0xf1, 0x80, 0x56, 0x55, 0x41, 0xfe, 0x1e, 0xc6,
	0x95, 0xdb, 0x30, 0xd9, 0x2b, 0xb8, 0xbf, 0xdc, 0x70, 0xe5, 0x57, 0x76, 0xef, 0x64, 0x3a, 0xa3,
	0xc8, 0xce, 0x36, 0x3d, 0x8b, 0xf6, 0xed, 0x93, 0xbf, 0x7d, 0x88, 0x5e, 0xbf, 0x3b, 0x63, 0x1f,
	0x61, 0xaf, 0x9d, 0x5f, 0xf6, 0x38, 0x68, 0xdc, 0x90, 0xf9, 0xe4, 0xc9, 0x8d, 0xf5, 0x90, 0x90,
	0x3b, 0xec, 0x9c, 0xf6, 0xdb, 0x84, 0x87, 0x1d, 0x86, 0x37, 0x5d, 0x91, 0x4d, 0x8e, 0xba, 0x8b,
	0xb5, 0xda, 0x19, 0xec, 0xac, 0x87, 0x85, 0x25, 0xf5, 0xfd, 0x6b, 0x31, 0x4c, 0x0e, 0x3b, 0x6b,
	0xb5, 0xd4, 0x29, 0x40, 0x13, 0x14, 0x16, 0x37, 0x93, 0x6c, 0x06, 0x2c, 0x39, 0xe8, 0xa8, 0xd4,
	0x22, 0x2f, 0x61, 0xe8, 0xbf, 0x07, 0x9b, 0x34, 0xce, 0x9b, 0x30, 0x25, 0xd3, 0x16, 0x5b, 0x3d,
	0xfc, 0x32, 0xa4, 0xdf, 0xca, 0x8b, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xbf, 0x73, 0x14, 0x95,
	0x63, 0x04, 0x00, 0x00,
}
